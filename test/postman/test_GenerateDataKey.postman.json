{
	"info": {
		"_postman_id": "a91327fb-d411-464a-95b1-d5200e1a0794",
		"name": "intel/ehsm:test_GenerateDataKey",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CreateKey",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var appid = pm.environment.get(\"appid\");\r",
							"var appkey = pm.environment.get(\"appkey\");\r",
							"var timestamp = pm.environment.get(\"timestamp\");\r",
							"\r",
							"var payload = {\r",
							"    \"keyspec\":\"EH_AES_GCM_128\",\r",
							"    \"origin\":\"EH_INTERNAL_KEY\"\r",
							"}\r",
							"let sign_parmass = {appid, payload, timestamp} \r",
							"const params_sort_str = (sign_parmas) => {\r",
							"    let str = '';\r",
							"    const sort_params_key_arr = Object.keys(sign_parmas).sort();\r",
							"    for(var k of sort_params_key_arr) {\r",
							"        if(sign_parmas[k] != '' && sign_parmas[k] != undefined && sign_parmas[k] != null) {\r",
							"            str += (str&& ('&' + '')) + k + '=' + (typeof sign_parmas[k] == 'object' ? params_sort_str(sign_parmas[k]) : sign_parmas[k])\r",
							"        }\r",
							"    }\r",
							"    return str\r",
							"}\r",
							"let sign_string = params_sort_str(sign_parmass);\r",
							"let sign = CryptoJS.HmacSHA256(sign_string, appkey);\r",
							"sign = CryptoJS.enc.Base64.stringify(sign);\r",
							"pm.environment.set(\"sign\", sign);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data=JSON.parse(responseBody);\r",
							"var cmk_base64=data.result.cmk_base64;\r",
							"pm.environment.set(\"cmk_base64\", cmk_base64)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"appid\":\"{{appid}}\",\r\n    \"nonce\":\"{{nonce}}\",\r\n    \"timestamp\":\"{{timestamp}}\",\r\n    \"sign\":\"{{sign}}\",\r\n    \"payload\":{\r\n        \"keyspec\":\"EH_AES_GCM_128\",\r\n        \"origin\":\"EH_INTERNAL_KEY\"\r\n    }\r\n}"
				},
				"url": {
					"raw": "{{ip}}:{{port}}/ehsm?Action=CreateKey",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"ehsm"
					],
					"query": [
						{
							"key": "Action",
							"value": "CreateKey"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GenerateDataKey",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var appid = pm.environment.get(\"appid\");\r",
							"var appkey = pm.environment.get(\"appkey\");\r",
							"var timestamp = pm.environment.get(\"timestamp\");\r",
							"\r",
							"var payload = {\r",
							"    \"cmk_base64\": pm.environment.get(\"cmk_base64\"),\r",
							"    \"keylen\":16,\r",
							"    \"aad\":\"test\"\r",
							"}\r",
							"let sign_parmass = {appid, payload, timestamp} \r",
							"const params_sort_str = (sign_parmas) => {\r",
							"    let str = '';\r",
							"    const sort_params_key_arr = Object.keys(sign_parmas).sort();\r",
							"    for(var k of sort_params_key_arr) {\r",
							"        if(sign_parmas[k] != '' && sign_parmas[k] != undefined && sign_parmas[k] != null) {\r",
							"            str += (str&& ('&' + '')) + k + '=' + (typeof sign_parmas[k] == 'object' ? params_sort_str(sign_parmas[k]) : sign_parmas[k])\r",
							"        }\r",
							"    }\r",
							"    return str\r",
							"}\r",
							"let sign_string = params_sort_str(sign_parmass);\r",
							"let sign = CryptoJS.HmacSHA256(sign_string, appkey);\r",
							"sign = CryptoJS.enc.Base64.stringify(sign);\r",
							"pm.environment.set(\"sign\", sign);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data=JSON.parse(responseBody);\r",
							"var ciphertext_base64=data.result.ciphertext_base64;\r",
							"var plaintext_base64=data.result.plaintext_base64;\r",
							"pm.environment.set(\"plaintext_base64\", plaintext_base64)\r",
							"pm.environment.set(\"ciphertext_base64\", ciphertext_base64)\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"appid\":\"{{appid}}\",\r\n    \"nonce\":\"{{nonce}}\",\r\n    \"timestamp\":\"{{timestamp}}\",\r\n    \"sign\":\"{{sign}}\",\r\n    \"payload\":{\r\n        \"cmk_base64\": \"{{cmk_base64}}\",\r\n        \"keylen\":16,\r\n        \"aad\":\"test\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ip}}:{{port}}/ehsm?Action=GenerateDataKey",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"ehsm"
					],
					"query": [
						{
							"key": "Action",
							"value": "GenerateDataKey"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Decrypt",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var appid = pm.environment.get(\"appid\");\r",
							"var appkey = pm.environment.get(\"appkey\");\r",
							"var timestamp = pm.environment.get(\"timestamp\");\r",
							"\r",
							"var payload = {\r",
							"        \"cmk_base64\": pm.environment.get(\"cmk_base64\"),\r",
							"        \"ciphertext\": pm.environment.get(\"ciphertext_base64\"),\r",
							"        \"aad\":\"test\"\r",
							"    }\r",
							"let sign_parmass = {appid, payload, timestamp} \r",
							"const params_sort_str = (sign_parmas) => {\r",
							"    let str = '';\r",
							"    const sort_params_key_arr = Object.keys(sign_parmas).sort();\r",
							"    for(var k of sort_params_key_arr) {\r",
							"        if(sign_parmas[k] != '' && sign_parmas[k] != undefined && sign_parmas[k] != null) {\r",
							"            str += (str&& ('&' + '')) + k + '=' + (typeof sign_parmas[k] == 'object' ? params_sort_str(sign_parmas[k]) : sign_parmas[k])\r",
							"        }\r",
							"    }\r",
							"    return str\r",
							"}\r",
							"let sign_string = params_sort_str(sign_parmass);\r",
							"let sign = CryptoJS.HmacSHA256(sign_string, appkey);\r",
							"sign = CryptoJS.enc.Base64.stringify(sign);\r",
							"pm.environment.set(\"sign\", sign);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data=JSON.parse(responseBody);\r",
							"var plaintext_base64=data.result.plaintext_base64;\r",
							"pm.environment.set(\"plaintext_base64\", plaintext_base64)\r",
							"pm.environment.set(\"plaintext\", atob(plaintext_base64))\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"appid\":\"{{appid}}\",\r\n    \"nonce\":\"{{nonce}}\",\r\n    \"timestamp\":\"{{timestamp}}\",\r\n    \"sign\":\"{{sign}}\",\r\n    \"payload\":{\r\n        \"cmk_base64\": \"{{cmk_base64}}\",\r\n        \"ciphertext\":\"{{ciphertext_base64}}\",\r\n        \"aad\":\"test\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ip}}:{{port}}/ehsm?Action=Decrypt",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"ehsm"
					],
					"query": [
						{
							"key": "Action",
							"value": "Decrypt"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var d = new Date();",
					"var timestamp= d.getTime();",
					"pm.environment.set(\"timestamp\", timestamp);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}