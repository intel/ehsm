/*
 * Copyright (C) 2020-2021 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

enclave {
    from "sgx_tkey_exchange.edl" import *;

    include "sgx_key_exchange.h"
    include "sgx_quote.h"
    include "sgx_trts.h"
    include "stdbool.h"
    include "datatypes.h"
    include "dh_session_protocol.h"

    untrusted {
        void ocall_print_string([in, string] const char *str);
    };

    trusted {
        /* Interfaces for remote attestation */
        public sgx_status_t enclave_init_ra(int b_pse,
            [out] sgx_ra_context_t *p_context);

        public sgx_status_t enclave_ra_close(sgx_ra_context_t context);

        public sgx_status_t enclave_verify_att_result_mac(sgx_ra_context_t context,
            [in,size=message_size] uint8_t* message,
            size_t message_size,
            [in,size=mac_size] uint8_t* mac,
            size_t mac_size);

        public sgx_status_t enclave_store_domainkey(sgx_ra_context_t context,
            [in,size=secret_size] uint8_t* p_secret,
            uint32_t secret_size,
            [in,count=16] uint8_t* gcm_mac);


        /* Interfaces for local attestation */
		public uint32_t enclave_la_session_request([out] sgx_dh_msg1_t *dh_msg1,
            [out] uint32_t *session_id);

        public uint32_t enclave_la_exchange_report([in] sgx_dh_msg2_t *dh_msg2,
            [out] sgx_dh_msg3_t *dh_msg3,
            uint32_t session_id);

        public uint32_t enclave_la_generate_response([in, size = req_message_size] secure_message_t* req_message,
            size_t req_message_size,
            size_t max_payload_size,
            [out, size=resp_message_size] secure_message_t* resp_message,
            size_t resp_message_size,
            uint32_t session_id);

        public uint32_t enclave_la_end_session(uint32_t session_id);

    };
};
