/*
 * Copyright (C) 2020-2021 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

enclave {
    from "sgx_tsgxssl.edl" import *;
    from "sgx_pthread.edl" import *;

    from "sgx_tkey_exchange.edl" import *;
    from "sgx_tstdc.edl" import *;
    from "sgx_dcap_tvl.edl" import *;

    include "sgx_report.h"
    include "sgx_key_exchange.h"
    include "sgx_quote.h"
    include "sgx_trts.h"
    include "stdbool.h"
    include "datatypes.h"
    include "dh_session_protocol.h"

    untrusted {
        void ocall_print_string([in, string] const char *str);

        uint32_t ocall_session_request([out] sgx_dh_msg1_t *dh_msg1,
                [out] uint32_t *session_id);

        uint32_t ocall_exchange_report([in] sgx_dh_msg2_t *dh_msg2,
                [out] sgx_dh_msg3_t *dh_msg3,
                uint32_t session_id);

        uint32_t ocall_send_request(uint32_t session_id,
                [in, size = req_message_size] secure_message_t* req_message,
                size_t req_message_size,
                size_t max_payload_size,
                [out, size=resp_message_size] secure_message_t* resp_message,
                size_t resp_message_size);

        uint32_t ocall_end_session(uint32_t session_id);
    };

    trusted {
        /* Interfaces for eHSM core crypto functions */
        public sgx_status_t enclave_create_key([in, out, size=cmk_size] ehsm_keyblob_t *cmk, size_t cmk_size);

        public sgx_status_t enclave_encrypt([in, size=cmk_size] const ehsm_keyblob_t* cmk, size_t cmk_size,
                            [in, size=aad_size] const ehsm_data_t *aad, size_t aad_size,
                            [in, size=plaintext_size] const ehsm_data_t *plaintext, size_t plaintext_size,
                            [in, out, size=ciphertext_size] ehsm_data_t *ciphertext, size_t ciphertext_size);

        public sgx_status_t enclave_decrypt([in, size=cmk_size] const ehsm_keyblob_t* cmk, size_t cmk_size,
                            [in, size=aad_size] const ehsm_data_t *aad, size_t aad_size,
                            [in, size=ciphertext_size] const ehsm_data_t *ciphertext, size_t ciphertext_size,
                            [in, out, size=plaintext_size] ehsm_data_t *plaintext, size_t plaintext_size);

        public sgx_status_t enclave_asymmetric_encrypt([in, size=cmk_size] const ehsm_keyblob_t* cmk, size_t cmk_size,
                            [in, size=plaintext_size] ehsm_data_t *plaintext, size_t plaintext_size,
                            [in, out, size=ciphertext_size] ehsm_data_t *ciphertext, size_t ciphertext_size);

        public sgx_status_t enclave_asymmetric_decrypt([in, size=cmk_size] const ehsm_keyblob_t* cmk, size_t cmk_size,
                            [in, size=ciphertext_size] ehsm_data_t *ciphertext, uint32_t ciphertext_size,
                            [in, out, size=plaintext_size] ehsm_data_t *plaintext, uint32_t plaintext_size);

        public sgx_status_t enclave_sign([in, size=cmk_size] const ehsm_keyblob_t* cmk, size_t cmk_size,
                            [in, size=data_size] const ehsm_data_t *data, size_t data_size,
                            [in, out, size=signature_size] ehsm_data_t *signature, size_t signature_size);
                                         
        public sgx_status_t enclave_verify([in, size=cmk_size] const ehsm_keyblob_t* cmk, size_t cmk_size,
                            [in, size=data_size] const ehsm_data_t *data, size_t data_size,
                            [in, size=signature_size] const ehsm_data_t *signature, size_t signature_size,
                            [out] bool* result);

        public sgx_status_t enclave_generate_datakey([in, size=cmk_size] const ehsm_keyblob_t* cmk, size_t cmk_size,
                            [in, size=aad_size] const ehsm_data_t *aad, size_t aad_size,
                            [in, out, size=plaintext_size] ehsm_data_t *plaintext, size_t plaintext_size,
                            [in, out, size=ciphertext_size] ehsm_data_t *ciphertext, size_t ciphertext_size);

        public sgx_status_t enclave_export_datakey([in, size=s_cmk_size] const ehsm_keyblob_t* s_cmk, size_t s_cmk_size,
                            [in, size=aad_size] const ehsm_data_t *aad, size_t aad_size,
                            [in, size=oldkey_size] ehsm_data_t *oldkey, size_t oldkey_size,
                            [in, size=d_cmk_size] const ehsm_keyblob_t* d_cmk, size_t d_cmk_size,
                            [in, out, size=newkey_size] ehsm_data_t *newkey, size_t newkey_size);

        public sgx_status_t enclave_generate_apikey(sgx_ra_context_t context,
                            [out, size=apikey_size] uint8_t *p_apikey,
                            uint32_t apikey_size,
                            [out, size=cipherapikey_size] uint8_t *cipherapikey,
                            uint32_t cipherapikey_size);

        public sgx_status_t enclave_get_apikey([out, size=kenlen] uint8_t *apikey, uint32_t kenlen);

        public sgx_status_t enclave_verify_att_result_mac(sgx_ra_context_t context,
                            [in,size=message_size] uint8_t* message,
                            size_t message_size,
                            [in,size=mac_size] uint8_t* mac,
                            size_t mac_size);

        public sgx_status_t enclave_get_rand([out, size=datalen] uint8_t *data, uint32_t datalen);

        public sgx_status_t enclave_verify_quote_policy([in, size=quote_size] uint8_t* quote,
                            uint32_t quote_size,
                            [in, size=mr_signer_good_size] const char* mr_signer_good,
                            uint32_t mr_signer_good_size,
                            [in, size=mr_enclave_good_size] const char* mr_enclave_good,
                            uint32_t mr_enclave_good_size);

        /* Interfaces for remote attestation */
        public sgx_status_t enclave_get_target_info([out] sgx_target_info_t* target_info);

        public sgx_status_t enclave_create_report([in]const sgx_target_info_t* p_qe3_target,
                            [out]sgx_report_t* p_report);

        public sgx_status_t enclave_init_ra(int b_pse, [out] sgx_ra_context_t *p_context);

        /* Interfaces used to create local secure channel based on local attestation */
        public uint32_t enclave_la_create_session();
        public uint32_t enclave_la_message_exchange();
        public uint32_t enclave_la_close_session();

    };
};
