/*
 * Copyright (C) 2020-2021 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

enclave {
    from "sgx_tkey_exchange.edl" import *;

    include "sgx_key_exchange.h"
    include "sgx_quote.h"
    include "sgx_trts.h"
    include "stdbool.h"
    include "datatypes.h"
    include "dh_session_protocol.h"

    untrusted {
        void ocall_print_string([in, string] const char *str);

        uint32_t ocall_session_request([out] sgx_dh_msg1_t *dh_msg1,
                [out] uint32_t *session_id);

        uint32_t ocall_exchange_report([in] sgx_dh_msg2_t *dh_msg2,
                [out] sgx_dh_msg3_t *dh_msg3,
                uint32_t session_id);

        uint32_t ocall_send_request(uint32_t session_id,
                [in, size = req_message_size] secure_message_t* req_message,
                size_t req_message_size,
                size_t max_payload_size,
                [out, size=resp_message_size] secure_message_t* resp_message,
                size_t resp_message_size);

        uint32_t ocall_end_session(uint32_t session_id);
    };

    trusted {
        /* Interfaces for eHSM core crypto functions */
        public sgx_status_t enclave_create_aes_key([out, size=cmk_blob_size] uint8_t *cmk_blob,
                uint32_t cmk_blob_size, [out] uint32_t *req_blob_size);

        public sgx_status_t enclave_aes_encrypt([in, size=aad_len] const uint8_t *aad, size_t aad_len,
                [in, size=cmk_blob_size] const uint8_t *cmk_blob, size_t cmk_blob_size,
                [in, size=plaintext_len] const uint8_t *plaintext, size_t plaintext_len,
                [out, size=cipherblob_len] uint8_t *cipherblob, size_t cipherblob_len);

        public sgx_status_t enclave_aes_decrypt([in, size=aad_len] const uint8_t *aad, size_t aad_len,
                [in, size=cmk_blob_size] const uint8_t *cmk_blob, size_t cmk_blob_size,
                [in, size=cipherblob_len] const uint8_t *cipherblob, size_t cipherblob_len,
                [out, size=plaintext_len] uint8_t *plaintext, size_t plaintext_len);

        public sgx_status_t enclave_generate_datakey(uint32_t key_spec,
                [in, size=cmk_blob_size] const uint8_t *cmk_blob, size_t cmk_blob_size,
                [in, size=context_len] const uint8_t *context, size_t context_len,
                [out, size=plain_key_len] uint8_t *plain_key, size_t plain_key_len,
                [out, size=encrypted_key_len] uint8_t *encrypted_key, size_t encrypted_key_len);

        public sgx_status_t enclave_export_datakey(uint32_t cmk_spec,
                [in, size=cmk_blob_size] const uint8_t *cmk_blob, size_t cmk_blob_size,
                [in, size=context_len] const uint8_t *context, size_t context_len,
                [in, size=encrypted_key_len] uint8_t *encrypted_key, size_t encrypted_key_len,
				uint32_t uk_spec,
				[in, size=uk_blob_size] const uint8_t *uk_blob, size_t uk_blob_size,
                [out, size=new_encrypted_key_len] uint8_t *new_encrypted_key, size_t new_encrypted_key_len);

        public sgx_status_t enclave_create_rsa_key([out, size=cmk_blob_size] uint8_t *cmk_blob, uint32_t cmk_blob_size,
                                               [out] uint32_t *req_blob_size);
        public sgx_status_t enclave_rsa_sign([in, size=cmk_blob_size] const uint8_t *cmk_blob, size_t cmk_blob_size,
                                         [in, size=data_len] const uint8_t *data, uint32_t data_len,
                                         [out, size=signature_len] uint8_t *signature, uint32_t signature_len);
        public sgx_status_t enclave_rsa_verify([in, size=cmk_blob_size] const uint8_t *cmk_blob, size_t cmk_blob_size,
                                           [in, size=data_len] const uint8_t *data, uint32_t data_len,
                                           [in, size=signature_len] const uint8_t *signature, uint32_t signature_len,
                                           [out] bool* result);
        public sgx_status_t enclave_rsa_encrypt([in, size=cmk_blob_size] const uint8_t *cmk_blob, size_t cmk_blob_size,
                                            [in, size=plaintext_len] const uint8_t *plaintext, uint32_t plaintext_len,
                                            [out, size=ciphertext_len] uint8_t *ciphertext, uint32_t ciphertext_len);
        public sgx_status_t enclave_rsa_decrypt([in, size=cmk_blob_size] const uint8_t *cmk_blob, size_t cmk_blob_size,
                                            [in, size=ciphertext_len] const uint8_t *ciphertext, uint32_t ciphertext_len,
                                            [out, size=plaintext_len] uint8_t *plaintext, uint32_t plaintext_len,
                                            [out] uint32_t *req_plaintext_len);

        public sgx_status_t enclave_generate_apikey(sgx_ra_context_t context,
                                                    [out, size=apikey_len] uint8_t *p_apikey,
                                                    uint32_t apikey_len,
                                                    [out, size=cipherkey_len] uint8_t *cipherkey,
                                                    uint32_t cipherkey_len);
        public sgx_status_t enclave_verify_att_result_mac(sgx_ra_context_t context,
            [in,size=message_size] uint8_t* message,
            size_t message_size,
            [in,size=mac_size] uint8_t* mac,
            size_t mac_size);


        /* Interfaces for remote attestation */
        public sgx_status_t enclave_init_ra(int b_pse, [out] sgx_ra_context_t *p_context);                                        

       /* Interfaces used to create local secure channel based on local attestation */
       public uint32_t enclave_la_create_session();
       public uint32_t enclave_la_message_exchange();
       public uint32_t enclave_la_close_session();

    };
};
